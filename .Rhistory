names(x) <- genes
x <- sort(x, decreasing = T)
x[11:length(x)] <- NA
x[x < 1.7] <- NA
x <- x[genes]
}, genes = row.names(TF_activity)))
TF_activity_top$gene <- row.names(TF_activity_top)
TF_activity_melt_top <- melt(TF_activity_top)
TF_activity_melt_top <- TF_activity_melt_top[complete.cases(TF_activity_melt_top),]
TF_activity_melt_top <- TF_activity_melt_top[order(TF_activity_melt_top$value, decreasing = T),]
TF_activity_melt_top$gene <- factor(TF_activity_melt_top$gene, levels = unique(TF_activity_melt_top$gene))
manual_color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
manual_color <- manual_color[(grepl("light",manual_color) | grepl("[12]",manual_color)) & !grepl("dark",manual_color) & !grepl("^blue",manual_color)]
# manual_color <- sample(manual_color, length(manual_color))
# names(manual_color) <- unique(TF_activity_melt_top$gene)
ggplot(TF_activity_melt_top, aes(x = variable, y = value, fill = gene, label = gene)) +
geom_bar(position="stack", stat="identity", color = "black") +
geom_text(size = 3, position = position_stack(vjust = 0.5)) +
theme_minimal() +
theme(legend.position = "none") + scale_fill_manual(values = manual_color)
DimPlot(pbmc, reduction = "umap")
library(dplyr)
library(Seurat)
library(genesorteR)
library(readr)
library(limma)
library(ggplot2)
library(reshape2)
source("~/Documents/transcriptutorial/scripts/support_functions.R")
load("~/Dropbox/Konrad_macrophages_scRNA/data/KH01/pbmc.hto_list.Rdata")
pbmc <- pbmc.hto_list[[3]] #1-C, 2-D, 3-E, 4-F
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^mt-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 3000 & percent.mt < 8) #based on vlnplot
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
# plot1
plot2
# CombinePlots(plots = list(plot1, plot2))
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
JackStrawPlot(pbmc, dims = 1:15)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10, k.param = 7) #E 7
pbmc <- FindClusters(pbmc, resolution = 0.2) #E 0.2
pbmc <- RunUMAP(pbmc, dims = 1:10, n.neighbors = 30)
DimPlot(pbmc, reduction = "umap")
# cluster1.markers <- FindMarkers(pbmc, ident.1 = 1, min.pct = 0.25)
# head(cluster1.markers, n = 5)
#
# cluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25)
# head(cluster5.markers, n = 5)
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
View(pbmc.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC))
########## OPTIONAL
# cluster1.markers <- FindMarkers(pbmc, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
#
# VlnPlot(pbmc, features = c("Ifi30", "Cd3g"))
#
# FeaturePlot(pbmc, features = c("Ifi30", "Cd3g"))
##########
top10 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
DoHeatmap(pbmc, features = top10$gene, label=FALSE) #+ ggtitle("MH3 top10 markers by cluster")
### REBULKING TEST
# batches <- as.data.frame(pbmc@assays$RNA@data)
#
# targets <- as.data.frame(matrix(NA,length(batches[1,]),2))
# names(targets) <- c("sample","condition")
# targets$sample <- names(batches)
# targets$condition <- as.character(pbmc@meta.data$seurat_clusters)
# batches <- batches[rowSums(batches) != 0,]
# test <- rebulk_limma(batches, targets, 5)
# test <- ttopFormatter(topTable(rebulk_limma(batches, targets, 5)[[1]], coef = 1, number = length(batches[,1]), adjust.method = "fdr"))
# test <- test[test$AveExpr != 0,]
# bulk_ttop_list <- list()
# bulk_ttop_list_t10 <- list()
# k <- 1
# for(i in unique(targets$condition))
# {
#   ttop <- ttopFormatter(topTable(rebulk_limma(batches, targets, i)[[1]], coef = 1, number = length(batches[,1]), adjust.method = "fdr"))
#   ttop$cluster <- as.character(i)
#   ttop_10 <- ttop[order(ttop$t, decreasing = T),]
#   # ttop_10$ID <- factor(ttop_10$ID, levels = unique(ttop_10$ID))
#   ttop_10 <- ttop_10[1:10,]
#   ttop_10 <- ttop_10[order(ttop_10$t, decreasing = F),]
#   # ttop_10$ID <- paste0(ttop_10$ID,"__",i)
#   bulk_ttop_list[[k]] <- ttop
#   bulk_ttop_list_t10[[k]] <- ttop_10
#   k <- k+1
# }
# names(bulk_ttop_list) <- unique(targets$condition)
# names(bulk_ttop_list_t10) <- unique(targets$condition)
#
# bulk_ttop_10_df <- as.data.frame(do.call(rbind,bulk_ttop_list_t10))
# bulk_ttop_10_df$ID <- factor(bulk_ttop_10_df$ID, levels = unique(bulk_ttop_10_df$ID))
# # bulk_ttop_10_df$ID_noclust <- gsub("__.*","",bulk_ttop_10_df$ID)
#
# ggplot(bulk_ttop_10_df, aes(x = cluster, y = -log10(P.Value), fill = ID, label = ID)) +
#   geom_bar(position="stack", stat="identity", color = "black") +
#   geom_text(size = 3, position = position_stack(vjust = 0.5)) +
#   theme_minimal() +
#   theme(legend.position = "none")
############
gs = sortGenes(pbmc@assays$RNA@data, Idents(pbmc))
gs_probs <- as.data.frame(gs$condGeneProb)
gs_probs$ID <- row.names(gs_probs)
gs_probs <- gs_probs[!grepl("Rp.*",gs_probs$ID)
& !grepl("A[A-Z].*",gs_probs$ID, ignore.case = F)
& !grepl("LOC.*",gs_probs$ID, ignore.case = F)
& !grepl("mt[-].*",gs_probs$ID, ignore.case = F)
& !grepl("RT[0-9][-].*",gs_probs$ID, ignore.case = F)
& !grepl("NEWGENE.*",gs_probs$ID, ignore.case = F)
& !grepl("[A-Z][A-Z].*",gs_probs$ID, ignore.case = F),]
gs_probs <- gs_probs[,-length(gs_probs[1,])]
cutoff_prob <- 0.6
gs_probs <- gs_probs[as.logical(apply(gs_probs,1,function(x) {
max_row <- max(x)
print(x > cutoff_prob)
# print(sum(x > cutoff_prob) > length(x) / 2)
if(sum(x > cutoff_prob) < length(x) / 2)
{
if(max_row > cutoff_prob)
{
return(T)
} else
{
return(F)
}
} else
{
return(F)
}
# if(max_row > cutoff_prob)
# {
#   if(sum(x) > cutoff_prob * length(x) / 2)
#   {
#     return(F)
#   } else
#   {
#     return(T)
#   }
# } else
# {
#   return(F)
# }
})),]
gs_probs_melt <- melt(gs_probs)
gs_probs <- gs_probs[,-12]
gs_probs_top <- as.data.frame(apply(gs_probs, 2, function(x, genes) {
names(x) <- genes
x <- sort(x, decreasing = T)
x[x <= cutoff_prob] <- NA
x[16:length(x)] <- NA
x <- x[genes]
}, genes = row.names(gs_probs)))
gs_probs_top$gene <- row.names(gs_probs_top)
gs_probs_melt_top <- melt(gs_probs_top)
gs_probs_melt_top <- gs_probs_melt_top[complete.cases(gs_probs_melt_top),]
gs_probs_melt_top <- gs_probs_melt_top[order(gs_probs_melt_top$value, decreasing = T),]
gs_probs_melt_top$gene <- factor(gs_probs_melt_top$gene, levels = unique(gs_probs_melt_top$gene))
manual_color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
manual_color <- manual_color[(grepl("light",manual_color) | grepl("[12]",manual_color)) & !grepl("dark",manual_color) & !grepl("^blue",manual_color)]
# manual_color <- sample(manual_color, length(manual_color))
# names(manual_color) <- unique(gs_probs_melt_top$gene)
ggplot(gs_probs_melt_top, aes(x = variable, y = value^4, fill = gene, label = gene)) +
geom_bar(position="stack", stat="identity", color = "black") +
geom_text(size = 3, position = position_stack(vjust = 0.5)) +
theme_minimal() +
theme(legend.position = "none") + scale_fill_manual(values = manual_color)
library("scales")
gs_probs <- as.data.frame(gs$condGeneProb)
gs_probs$ID <- row.names(gs_probs)
gs_probs <- gs_probs[!grepl("Rp.*",gs_probs$ID)
& !grepl("A[A-Z].*",gs_probs$ID, ignore.case = F)
& !grepl("LOC.*",gs_probs$ID, ignore.case = F)
& !grepl("Mt[-].*",gs_probs$ID, ignore.case = F)
& !grepl("RT[0-9][-].*",gs_probs$ID, ignore.case = F)
& !grepl("NEWGENE.*",gs_probs$ID, ignore.case = F)
& !grepl("[A-Z][A-Z].*",gs_probs$ID, ignore.case = F),]
gs_probs <- gs_probs[,-length(gs_probs[1,])]
gs_probs_no_1 <- gs_probs
gs_probs_no_1[gs_probs_no_1 == 1 | gs_probs_no_1 == 0] <- NA
max_prob <- max(gs_probs_no_1, na.rm = T)
max_prob <- (1 - max_prob)/2 + max_prob
gs_probs_zscore <- as.data.frame(rescale(as.matrix(gs_probs), to = c(0.5,max_prob)))
gs_probs_zscore <- as.data.frame(qnorm(as.matrix(gs_probs_zscore)))
row.names(gs_probs_zscore) <- toupper(row.names(gs_probs_zscore))
############### DOROTHEA on GS
url <- paste0(
'http://omnipathdb.org/interactions?',
'datasets=tfregulons&tfregulons_levels=A,B&genesymbols=1&fields=sources,tfregulons_level'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
##Dorothea/viper
dorothea <- download_omnipath()
dorothea <- dorothea[,c(4,3,6,7)]
dorothea$sign <- dorothea$is_stimulation - dorothea$is_inhibition
dorothea$sign <- ifelse(dorothea$sign == 0, 1, dorothea$sign)
dorothea <- dorothea[,c(1,2,5)]
library(viper)
viper_regulon <- df_to_viper_regulon(dorothea)
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = gs_probs_zscore, regulon = viper_regulon, nes = T, minsize = 30, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
# TF_activity[TF_activity < 1.7] <- NA
# TF_activity <- as.data.frame(t(apply(TF_activity,1,scale)))
names(TF_activity) <- names(gs_probs_zscore)
TF_activity_top <- as.data.frame(apply(TF_activity, 2, function(x, genes) {
names(x) <- genes
x <- sort(x, decreasing = T)
x[11:length(x)] <- NA
x[x < 1.7] <- NA
x <- x[genes]
}, genes = row.names(TF_activity)))
TF_activity_top$gene <- row.names(TF_activity_top)
TF_activity_melt_top <- melt(TF_activity_top)
TF_activity_melt_top <- TF_activity_melt_top[complete.cases(TF_activity_melt_top),]
TF_activity_melt_top <- TF_activity_melt_top[order(TF_activity_melt_top$value, decreasing = T),]
TF_activity_melt_top$gene <- factor(TF_activity_melt_top$gene, levels = unique(TF_activity_melt_top$gene))
manual_color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
manual_color <- manual_color[(grepl("light",manual_color) | grepl("[12]",manual_color)) & !grepl("dark",manual_color) & !grepl("^blue",manual_color)]
# manual_color <- sample(manual_color, length(manual_color))
# names(manual_color) <- unique(TF_activity_melt_top$gene)
ggplot(TF_activity_melt_top, aes(x = variable, y = value, fill = gene, label = gene)) +
geom_bar(position="stack", stat="identity", color = "black") +
geom_text(size = 3, position = position_stack(vjust = 0.5)) +
theme_minimal() +
theme(legend.position = "none") + scale_fill_manual(values = manual_color)
DimPlot(pbmc, reduction = "umap")
library(dplyr)
library(Seurat)
library(genesorteR)
library(readr)
library(limma)
library(ggplot2)
library(reshape2)
source("~/Documents/transcriptutorial/scripts/support_functions.R")
load("~/Dropbox/Konrad_macrophages_scRNA/data/KH01/pbmc.hto_list.Rdata")
pbmc <- pbmc.hto_list[[4]] #1-C, 2-D, 3-E, 4-F
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^mt-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 3000 & percent.mt < 8) #based on vlnplot
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
# plot1
plot2
# CombinePlots(plots = list(plot1, plot2))
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
JackStrawPlot(pbmc, dims = 1:15)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10, k.param = 30) #E 7 - rest 30
pbmc <- FindClusters(pbmc, resolution = 0.12) #E 0.2 - rest 0.12
pbmc <- RunUMAP(pbmc, dims = 1:10, n.neighbors = 30)
DimPlot(pbmc, reduction = "umap")
pbmc <- FindNeighbors(pbmc, dims = 1:10, k.param = 20) #E 7 - rest 30
pbmc <- FindClusters(pbmc, resolution = 0.15) #E 0.2 - rest 0.12
pbmc <- RunUMAP(pbmc, dims = 1:10, n.neighbors = 20)
DimPlot(pbmc, reduction = "umap")
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
View(pbmc.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC))
########## OPTIONAL
# cluster1.markers <- FindMarkers(pbmc, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
#
# VlnPlot(pbmc, features = c("Ifi30", "Cd3g"))
#
# FeaturePlot(pbmc, features = c("Ifi30", "Cd3g"))
##########
top10 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
DoHeatmap(pbmc, features = top10$gene, label=FALSE) #+ ggtitle("MH3 top10 markers by cluster")
### REBULKING TEST
# batches <- as.data.frame(pbmc@assays$RNA@data)
#
# targets <- as.data.frame(matrix(NA,length(batches[1,]),2))
# names(targets) <- c("sample","condition")
# targets$sample <- names(batches)
# targets$condition <- as.character(pbmc@meta.data$seurat_clusters)
# batches <- batches[rowSums(batches) != 0,]
# test <- rebulk_limma(batches, targets, 5)
# test <- ttopFormatter(topTable(rebulk_limma(batches, targets, 5)[[1]], coef = 1, number = length(batches[,1]), adjust.method = "fdr"))
# test <- test[test$AveExpr != 0,]
# bulk_ttop_list <- list()
# bulk_ttop_list_t10 <- list()
# k <- 1
# for(i in unique(targets$condition))
# {
#   ttop <- ttopFormatter(topTable(rebulk_limma(batches, targets, i)[[1]], coef = 1, number = length(batches[,1]), adjust.method = "fdr"))
#   ttop$cluster <- as.character(i)
#   ttop_10 <- ttop[order(ttop$t, decreasing = T),]
#   # ttop_10$ID <- factor(ttop_10$ID, levels = unique(ttop_10$ID))
#   ttop_10 <- ttop_10[1:10,]
#   ttop_10 <- ttop_10[order(ttop_10$t, decreasing = F),]
#   # ttop_10$ID <- paste0(ttop_10$ID,"__",i)
#   bulk_ttop_list[[k]] <- ttop
#   bulk_ttop_list_t10[[k]] <- ttop_10
#   k <- k+1
# }
# names(bulk_ttop_list) <- unique(targets$condition)
# names(bulk_ttop_list_t10) <- unique(targets$condition)
#
# bulk_ttop_10_df <- as.data.frame(do.call(rbind,bulk_ttop_list_t10))
# bulk_ttop_10_df$ID <- factor(bulk_ttop_10_df$ID, levels = unique(bulk_ttop_10_df$ID))
# # bulk_ttop_10_df$ID_noclust <- gsub("__.*","",bulk_ttop_10_df$ID)
#
# ggplot(bulk_ttop_10_df, aes(x = cluster, y = -log10(P.Value), fill = ID, label = ID)) +
#   geom_bar(position="stack", stat="identity", color = "black") +
#   geom_text(size = 3, position = position_stack(vjust = 0.5)) +
#   theme_minimal() +
#   theme(legend.position = "none")
############
gs = sortGenes(pbmc@assays$RNA@data, Idents(pbmc))
gs_probs <- as.data.frame(gs$condGeneProb)
gs_probs$ID <- row.names(gs_probs)
gs_probs <- gs_probs[!grepl("Rp.*",gs_probs$ID)
& !grepl("A[A-Z].*",gs_probs$ID, ignore.case = F)
& !grepl("LOC.*",gs_probs$ID, ignore.case = F)
& !grepl("mt[-].*",gs_probs$ID, ignore.case = F)
& !grepl("RT[0-9][-].*",gs_probs$ID, ignore.case = F)
& !grepl("NEWGENE.*",gs_probs$ID, ignore.case = F)
& !grepl("[A-Z][A-Z].*",gs_probs$ID, ignore.case = F),]
gs_probs <- gs_probs[,-length(gs_probs[1,])]
cutoff_prob <- 0.6
gs_probs <- gs_probs[as.logical(apply(gs_probs,1,function(x) {
max_row <- max(x)
print(x > cutoff_prob)
# print(sum(x > cutoff_prob) > length(x) / 2)
if(sum(x > cutoff_prob) < length(x) / 2)
{
if(max_row > cutoff_prob)
{
return(T)
} else
{
return(F)
}
} else
{
return(F)
}
# if(max_row > cutoff_prob)
# {
#   if(sum(x) > cutoff_prob * length(x) / 2)
#   {
#     return(F)
#   } else
#   {
#     return(T)
#   }
# } else
# {
#   return(F)
# }
})),]
gs_probs_melt <- melt(gs_probs)
gs_probs <- gs_probs[,-12]
gs_probs_top <- as.data.frame(apply(gs_probs, 2, function(x, genes) {
names(x) <- genes
x <- sort(x, decreasing = T)
x[x <= cutoff_prob] <- NA
x[16:length(x)] <- NA
x <- x[genes]
}, genes = row.names(gs_probs)))
gs_probs_top$gene <- row.names(gs_probs_top)
gs_probs_melt_top <- melt(gs_probs_top)
gs_probs_melt_top <- gs_probs_melt_top[complete.cases(gs_probs_melt_top),]
gs_probs_melt_top <- gs_probs_melt_top[order(gs_probs_melt_top$value, decreasing = T),]
gs_probs_melt_top$gene <- factor(gs_probs_melt_top$gene, levels = unique(gs_probs_melt_top$gene))
manual_color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
manual_color <- manual_color[(grepl("light",manual_color) | grepl("[12]",manual_color)) & !grepl("dark",manual_color) & !grepl("^blue",manual_color)]
# manual_color <- sample(manual_color, length(manual_color))
# names(manual_color) <- unique(gs_probs_melt_top$gene)
ggplot(gs_probs_melt_top, aes(x = variable, y = value^4, fill = gene, label = gene)) +
geom_bar(position="stack", stat="identity", color = "black") +
geom_text(size = 3, position = position_stack(vjust = 0.5)) +
theme_minimal() +
theme(legend.position = "none") + scale_fill_manual(values = manual_color)
library("scales")
gs_probs <- as.data.frame(gs$condGeneProb)
gs_probs$ID <- row.names(gs_probs)
gs_probs <- gs_probs[!grepl("Rp.*",gs_probs$ID)
& !grepl("A[A-Z].*",gs_probs$ID, ignore.case = F)
& !grepl("LOC.*",gs_probs$ID, ignore.case = F)
& !grepl("Mt[-].*",gs_probs$ID, ignore.case = F)
& !grepl("RT[0-9][-].*",gs_probs$ID, ignore.case = F)
& !grepl("NEWGENE.*",gs_probs$ID, ignore.case = F)
& !grepl("[A-Z][A-Z].*",gs_probs$ID, ignore.case = F),]
gs_probs <- gs_probs[,-length(gs_probs[1,])]
gs_probs_no_1 <- gs_probs
gs_probs_no_1[gs_probs_no_1 == 1 | gs_probs_no_1 == 0] <- NA
max_prob <- max(gs_probs_no_1, na.rm = T)
max_prob <- (1 - max_prob)/2 + max_prob
gs_probs_zscore <- as.data.frame(rescale(as.matrix(gs_probs), to = c(0.5,max_prob)))
gs_probs_zscore <- as.data.frame(qnorm(as.matrix(gs_probs_zscore)))
row.names(gs_probs_zscore) <- toupper(row.names(gs_probs_zscore))
############### DOROTHEA on GS
url <- paste0(
'http://omnipathdb.org/interactions?',
'datasets=tfregulons&tfregulons_levels=A,B&genesymbols=1&fields=sources,tfregulons_level'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
##Dorothea/viper
dorothea <- download_omnipath()
dorothea <- dorothea[,c(4,3,6,7)]
dorothea$sign <- dorothea$is_stimulation - dorothea$is_inhibition
dorothea$sign <- ifelse(dorothea$sign == 0, 1, dorothea$sign)
dorothea <- dorothea[,c(1,2,5)]
library(viper)
viper_regulon <- df_to_viper_regulon(dorothea)
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = gs_probs_zscore, regulon = viper_regulon, nes = T, minsize = 30, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
# TF_activity[TF_activity < 1.7] <- NA
# TF_activity <- as.data.frame(t(apply(TF_activity,1,scale)))
names(TF_activity) <- names(gs_probs_zscore)
TF_activity_top <- as.data.frame(apply(TF_activity, 2, function(x, genes) {
names(x) <- genes
x <- sort(x, decreasing = T)
x[11:length(x)] <- NA
x[x < 1.7] <- NA
x <- x[genes]
}, genes = row.names(TF_activity)))
TF_activity_top$gene <- row.names(TF_activity_top)
TF_activity_melt_top <- melt(TF_activity_top)
TF_activity_melt_top <- TF_activity_melt_top[complete.cases(TF_activity_melt_top),]
TF_activity_melt_top <- TF_activity_melt_top[order(TF_activity_melt_top$value, decreasing = T),]
TF_activity_melt_top$gene <- factor(TF_activity_melt_top$gene, levels = unique(TF_activity_melt_top$gene))
manual_color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
manual_color <- manual_color[(grepl("light",manual_color) | grepl("[12]",manual_color)) & !grepl("dark",manual_color) & !grepl("^blue",manual_color)]
# manual_color <- sample(manual_color, length(manual_color))
# names(manual_color) <- unique(TF_activity_melt_top$gene)
ggplot(TF_activity_melt_top, aes(x = variable, y = value, fill = gene, label = gene)) +
geom_bar(position="stack", stat="identity", color = "black") +
geom_text(size = 3, position = position_stack(vjust = 0.5)) +
theme_minimal() +
theme(legend.position = "none") + scale_fill_manual(values = manual_color)
DimPlot(pbmc, reduction = "umap")
library(readr)
count_df_vsn <- as.data.frame(read_csv("Documents/transcriptutorial/data/count_df_vsn.csv"))
View(count_df_vsn)
row.names(count_df_vsn) <- count_df_vsn$gene
count_df_vsn <- count_df_vsn[-1,]
count_df_vsn <- as.data.frame(read_csv("Documents/transcriptutorial/data/count_df_vsn.csv"))
row.names(count_df_vsn) <- count_df_vsn$gene
count_df_vsn <- count_df_vsn[-1,]
count_df_vsn <- as.data.frame(read_csv("Documents/transcriptutorial/data/count_df_vsn.csv"))
row.names(count_df_vsn) <- count_df_vsn$gene
count_df_vsn <- count_df_vsn[,-1]
count_df_vsn <- count_df_vsn[complete.cases(count_df_vsn),]
### Preparing dorothea
url <- paste0(
'http://omnipathdb.org/interactions?',
'datasets=tfregulons&tfregulons_levels=A,B&genesymbols=1&fields=sources,tfregulons_level'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
##Dorothea/viper
dorothea <- download_omnipath()
dorothea <- dorothea[,c(4,3,6,7)]
dorothea$sign <- dorothea$is_stimulation - dorothea$is_inhibition
dorothea$sign <- ifelse(dorothea$sign == 0, 1, dorothea$sign)
dorothea <- dorothea[,c(1,2,5)]
TF_activity <- as.data.frame(
viper(eset = count_df_vsn, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
library(viper)
TF_activity <- as.data.frame(
viper(eset = count_df_vsn, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
viper_regulon <- df_to_viper_regulon(dorothea)
viper_regulon <- df_to_viper_regulon(dorothea)
working_dir <- "~/Documents/transcriptutorial/" #put whatever is your working directory here
setwd(working_dir)
source("scripts/support_functions.R")
viper_regulon <- df_to_viper_regulon(dorothea)
TF_activity <- as.data.frame(
viper(eset = count_df_vsn, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
View(TF_activity)
TF_activity$TF <- row.names(TF_activity)
TF_activity <- TF_activity[,c(7,1,2,3,4,5,6)]
write_csv(TF_activity,"~/Documents/transcriptutorial/data/TF_act_sample_resolution.csv")
View(TF_activity)
