max_length <- length(phospho_df[,1])
for(phosphosite in row.names(phospho_df))
{
phospho_prot <- gsub("_.*","",phosphosite)
print(paste(j,max_length, sep = "/"))
if(phospho_prot %in% row.names(protein_df))
{
df <- as.data.frame(cbind(as.numeric(phospho_df[phosphosite,]),
as.numeric(protein_df[phospho_prot,])))
df <- df[complete.cases(df),]
if(length(df[,1]) > 5)
{
ggplot(df,aes(X2,X1))+stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm',formula=X1~0+X2)
k <- k+1
}
}
j <- j+1
}
}
plot_scat(phospho_df = phospho[c(1:2),], protein_df = proteins)
library(ggplot2)
plot_scat <- function(phospho_df, protein_df)
{
if(sum(names(phospho_df) != names(protein_df)))
{
print("samples between the two dataframes have to match and be in the same order")
return(0)
}
regressed_phospho <- list()
k <- 1
j <- 1
max_length <- length(phospho_df[,1])
for(phosphosite in row.names(phospho_df))
{
phospho_prot <- gsub("_.*","",phosphosite)
print(paste(j,max_length, sep = "/"))
if(phospho_prot %in% row.names(protein_df))
{
df <- as.data.frame(cbind(as.numeric(phospho_df[phosphosite,]),
as.numeric(protein_df[phospho_prot,])))
df <- df[complete.cases(df),]
if(length(df[,1]) > 5)
{
ggp <- ggplot(df,aes(X2,X1))+stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm',formula=X1~0+X2)
k <- k+1
}
}
j <- j+1
return(ggp)
}
}
plot(plot_scat(phospho_df = phospho[c(1:2),], protein_df = proteins))
library(ggplot2)
plot_scat <- function(phospho_df, protein_df)
{
if(sum(names(phospho_df) != names(protein_df)))
{
print("samples between the two dataframes have to match and be in the same order")
return(0)
}
regressed_phospho <- list()
k <- 1
j <- 1
max_length <- length(phospho_df[,1])
for(phosphosite in row.names(phospho_df))
{
phospho_prot <- gsub("_.*","",phosphosite)
print(paste(j,max_length, sep = "/"))
if(phospho_prot %in% row.names(protein_df))
{
df <- as.data.frame(cbind(as.numeric(phospho_df[phosphosite,]),
as.numeric(protein_df[phospho_prot,])))
df <- df[complete.cases(df),]
if(length(df[,1]) > 5)
{
ggp <- ggplot(df,aes(V2,V1))+stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm',formula=V1~0+V2)
k <- k+1
}
}
j <- j+1
return(ggp)
}
}
plot(plot_scat(phospho_df = phospho[c(1:2),], protein_df = proteins))
library(readxl)
library(omicToolsTest)
library(limma)
library(readr)
library(dplyr)
source("~/Dropbox/marco_metactivity/scripts/metactivity_function.R")
load("~/Dropbox/marco_metactivity/support/tree_no_ETC_splitted_with_ASS1_no_cofac.RData")
time_course_metabo <- as.data.frame(
read_excel("Dropbox/marco_metactivity/data/time_course_metabo.xlsx"))
time_course_metabo$timepoint <- gsub("'","",time_course_metabo$timepoint)
row.names(time_course_metabo) <- paste(
time_course_metabo$sample, paste(
time_course_metabo$timepoint, seq(1:length(time_course_metabo[,1])), sep = "_"
), sep = "_"
)
time_course_metabo <- time_course_metabo[,-c(1,2)]
time_course_metabo <- as.data.frame(t(time_course_metabo))
time_course_metabo[12,] <- time_course_metabo[12,] + colSums(time_course_metabo[7:11,])
time_course_metabo <- time_course_metabo[-c(7:11),]
time_course_metabo[time_course_metabo == 0] <- NA
batches <- time_course_metabo
batches <- log2(batches)
targets <- as.data.frame(matrix(NA,length(batches[1,]),2))
names(targets) <- c("sample","condition")
targets$sample <- names(batches)
targets$condition <- gsub("_[0-9]{1,2}$","",names(batches))
magicPlotMaker(batches, "~/Dropbox/marco_metactivity/visualisation/time_course/log2",targets, no_pca_label = T)
unique(targets$condition)
row.names(batches) <- tolower(row.names(batches))
row.names(batches) <- gsub(" ","_",row.names(batches))
limmaRes <- runLimma(batches, targets, comparisons = list(c(2,-1),c(3,-1),
c(5,-4),c(6,-4),
c(8,-7),c(9,-7),
c(10,-11),c(12,-11)))
ttop_786O_5 <- ttopFormatter(topTable(limmaRes[[1]], coef = 1, number = 27, adjust.method = "fdr"))
ttop_M1A_5 <- ttopFormatter(topTable(limmaRes[[1]], coef = 2, number = 27, adjust.method = "fdr"))
ttop_786O_30 <- ttopFormatter(topTable(limmaRes[[1]], coef = 3, number = 27, adjust.method = "fdr"))
ttop_M1A_30 <- ttopFormatter(topTable(limmaRes[[1]], coef = 4, number = 27, adjust.method = "fdr"))
ttop_786O_1h <- ttopFormatter(topTable(limmaRes[[1]], coef = 5, number = 27, adjust.method = "fdr"))
ttop_M1A_1h <- ttopFormatter(topTable(limmaRes[[1]], coef = 6, number = 27, adjust.method = "fdr"))
ttop_786O_3h <- ttopFormatter(topTable(limmaRes[[1]], coef = 7, number = 27, adjust.method = "fdr"))
ttop_M1A_3h <- ttopFormatter(topTable(limmaRes[[1]], coef = 8, number = 27, adjust.method = "fdr"))
t_table <- merge(ttop_786O_5[,c(1,4)], ttop_M1A_5[,c(1,4)], by = "ID")
t_table <- merge(t_table, ttop_786O_30[,c(1,4)], by = "ID")
t_table <- merge(t_table, ttop_M1A_30[,c(1,4)], by = "ID")
t_table <- merge(t_table, ttop_786O_1h[,c(1,4)], by = "ID")
t_table <- merge(t_table, ttop_M1A_1h[,c(1,4)], by = "ID")
t_table <- merge(t_table, ttop_786O_3h[,c(1,4)], by = "ID")
t_table <- merge(t_table, ttop_M1A_3h[,c(1,4)], by = "ID")
names(t_table) <- c("ID","c786O_5","M1A_5","c786O_30","M1A_30","c786O_1h","M1A_1h","c786O_3h","M1A_3h")
t_table <- t_table[,c(1,2,4,6,8,3,5,7,9)]
write_csv(t_table,"~/Dropbox/marco_metactivity/results/timecourse_metab_t_table.csv")
kegg_mapping <- as.data.frame(read_csv("Dropbox/marco_metactivity/support/timecourse_metab_to_kegg.txt"))
metabolomic_limma_t <- t_table
names(metabolomic_limma_t)[1] <- "metab"
kegg_mapping$KEGG <- paste("cpd:",kegg_mapping$KEGG, sep = "")
####WITH RECON
affixes <- c("c","l","x","m","e","n","r")
temp_kegg_mapping <- kegg_mapping
for (aff in affixes)
{
new_kegg_mapping <- temp_kegg_mapping
new_kegg_mapping$KEGG <- paste(new_kegg_mapping$KEGG, aff, sep = "_")
kegg_mapping <- as.data.frame(rbind(kegg_mapping, new_kegg_mapping))
}
kegg_mapping <- kegg_mapping[-c(1:32),]
kegg_mapping[,1] <- tolower(kegg_mapping[,1])
metabolomic_limma_t$metabolite <- tolower(metabolomic_limma_t$metabolite)
metabolomic_limma_t <- merge(metabolomic_limma_t, kegg_mapping, by = "metab")
metabolomic_limma_t <- metabolomic_limma_t[,c(10,2,3,4,5,6,7,8,9)]
###########################
reaction_set_list <- list()
for(i in 1:10)
{
print(i)
pen <- i/10
reaction_set_list[[i]] <- target_set_from_forest(tree_without_cofactors, metabolomic_limma_t$KEGG, penalty = pen)
}
save.image(file = "~/Dropbox/marco_metactivity/support/reaction_set_list_splitted_with_ASS1_no_cofac_marco_timecourse.RData")
for(i in 1:length(reaction_set_list))
{
reaction_set <- reaction_set_list[[i]]
reaction_set <- reaction_set %>% group_by(set,targets) %>% summarise_each(funs(sum(., na.rm = TRUE)))
reaction_set <- as.data.frame(reaction_set)
reaction_set_list[[i]] <- reaction_set
}
##########################
penalty <- 3
n <- length(unique(reaction_set_list[[penalty]][,1]))
regulonNames = unique(reaction_set_list[[penalty]][,1])[1:n]
regulons_df <- reaction_set_list[[penalty]]
regulons_df <- regulons_df[regulons_df[,1] %in% unique(regulons_df[,1])[1:n],]
mean_NES_df <- metactivity(metabolomic_t_table = metabolomic_limma_t,
regulons_df = regulons_df,
compartment_pattern = "_[a-z]$",
k = 10000)
View(mean_NES_df)
load("~/Dropbox/kidney_cancer_multiomic_pipeline/data/transcripto/counts_final_subset.RData")
load("~/Dropbox/kidney_cancer_multiomic_pipeline/data/transcripto/counts_final_subset.RData")
library(readr)
library(stringr)
library('org.Hs.eg.db')
#### Preparation des input metabolomic
ttop_tumour_vs_healthy <- as.data.frame(
read_csv("Dropbox/kidney_cancer_multiomic_pipeline/results/metabolomic/final_samples/ttop_tumour_vs_healthy.csv"))
View(ttop_tumour_vs_healthy)
library(readr)
library(stringr)
library('org.Hs.eg.db')
#### Preparation des input metabolomic
ttop_tumour_vs_healthy <- as.data.frame(
read_csv("Dropbox/kidney_cancer_multiomic_pipeline/results/metabolomic/final_samples/ttop_tumour_vs_healthy.csv"))
metab_to_kegg <- as.data.frame(
read_csv("Dropbox/kidney_cancer_multiomic_pipeline/support/metab_to_kegg.txt"))
meta_network_with_X <- as.data.frame(
read_delim("Dropbox/kidney_cancer_multiomic_pipeline/support/meta_network_with_X.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
kegg_to_pubchem <- as.data.frame(
read_csv("Dropbox/kidney_cancer_multiomic_pipeline/support/kegg_to_pubchem.txt",
col_names = FALSE))
kegg_to_pubchem$X2 <- paste("XMetab__",kegg_to_pubchem$X2, sep = "")
compartment_codes <- unique(c(meta_network_with_X$source,meta_network_with_X$target))
compartment_codes <- compartment_codes[grepl("Metab",compartment_codes)]
compartment_codes <- unique(str_match(compartment_codes,"___.____"))
compartment_mapping <- list()
for(i in 1:length(compartment_codes))
{
df <- kegg_to_pubchem
df$X2 <- paste(df$X2, compartment_codes[i], sep = "")
compartment_mapping[[i]] <- df
}
compartment_mapping <- as.data.frame(do.call(rbind, compartment_mapping))
compartment_mapping <- compartment_mapping[
compartment_mapping$X2 %in% meta_network_with_X$source |
compartment_mapping$X2 %in% meta_network_with_X$target,
]
kegg_to_pubchem_with_comp <- compartment_mapping
names(kegg_to_pubchem_with_comp) <- c("KEGG","pubchem")
full_mapping <- merge(metab_to_kegg, kegg_to_pubchem_with_comp, by = "KEGG")
names(ttop_tumour_vs_healthy)[1] <- "metab_name"
ttop_tumour_vs_healthy <- merge(ttop_tumour_vs_healthy, full_mapping, by = "metab_name")
ttop_tumour_vs_healthy <- ttop_tumour_vs_healthy[,c(9,2:7)]
kinase_activities <- as.data.frame(
read_csv("Dropbox/kidney_cancer_multiomic_pipeline/results/phospho/final_samples/kinase_activities.csv"))
symbols <- kinase_activities$X1
# use mapIds method to obtain Entrez IDs
mapping_symbole_to_entrez <- mapIds(org.Hs.eg.db, symbols, 'ENTREZID', 'SYMBOL')
for(i in 1:length(kinase_activities[,1]))
{
kinase_activities[i,1] <- mapping_symbole_to_entrez[kinase_activities[i,1]]
}
kinase_activities <- kinase_activities[complete.cases(kinase_activities),]
kinase_activities$X1 <- paste("X", kinase_activities$X1, sep = "")
View(kinase_activities)
##TF
TF_scores <- as.data.frame(
read_csv("Dropbox/kidney_cancer_multiomic_pipeline/results/transcriptomic/final_subset/TF_scores.csv"))
symbols <- TF_scores$ID
# use mapIds method to obtain Entrez IDs
mapping_symbole_to_entrez <- mapIds(org.Hs.eg.db, symbols, 'ENTREZID', 'SYMBOL')
TF_scores <- as.data.frame(
read_csv("Dropbox/kidney_cancer_multiomic_pipeline/results/transcriptomic/final_subset/TF_scores.csv"))
symbols <- TF_scores$ID
# use mapIds method to obtain Entrez IDs
mapping_symbole_to_entrez <- mapIds(org.Hs.eg.db, symbols, 'ENTREZID', 'SYMBOL')
for(i in 1:length(TF_scores[,1]))
{
TF_scores[i,1] <- mapping_symbole_to_entrez[TF_scores[i,1]]
}
TF_scores <- TF_scores[complete.cases(TF_scores),]
TF_scores$ID <- paste("X", TF_scores$ID, sep = "")
View(TF_scores)
##Combine TF and kinase
names(TF_scores) <- c("X1","NES")
kinase_activities <- as.data.frame(rbind(kinase_activities, TF_scores))
View(kinase_activities)
metab_input_carnival <- ttop_tumour_vs_healthy[ttop_tumour_vs_healthy$P.Value < 0.05,c(1,4)]
metab_input_carnival <- metab_input_carnival[metab_input_carnival$pubchem %in% meta_network_with_X$source | metab_input_carnival$pubchem %in% meta_network_with_X$target,]
metabs <- metab_input_carnival$pubchem
metab_input_carnival <- as.data.frame(sign(t(metab_input_carnival[,2])))
names(metab_input_carnival) <- metabs
signaling_input_carnival <- kinase_activities[abs(kinase_activities$NES) > 1.7,]
signaling_input_carnival <- signaling_input_carnival[signaling_input_carnival$X1 %in% meta_network_with_X$source | signaling_input_carnival$X1 %in% meta_network_with_X$target,]
signaling_enzymes <- signaling_input_carnival$X1
signaling_input_carnival <- as.data.frame(sign(t(signaling_input_carnival[,2])))
names(signaling_input_carnival) <- signaling_enzymes
write_csv(metab_input_carnival, "~/Dropbox/kidney_cancer_multiomic_pipeline/results/metabolomic/final_samples/metab_input_carnival.csv")
write_tsv(metab_input_carnival, "~/Dropbox/kidney_cancer_multiomic_pipeline/results/metabolomic/final_samples/metab_input_carnival.tsv")
write_csv(signaling_input_carnival, "~/Dropbox/kidney_cancer_multiomic_pipeline/results/phospho/final_samples/signaling_input_carnival.csv")
write_tsv(signaling_input_carnival, "~/Dropbox/kidney_cancer_multiomic_pipeline/results/phospho/final_samples/signaling_input_carnival.tsv")
meta_network_with_X$source <- gsub("[-+{},;() ]","______",meta_network_with_X$source)
meta_network_with_X$target <- gsub("[-+{},;() ]","______",meta_network_with_X$target)
write_tsv(meta_network_with_X, "~/Dropbox/kidney_cancer_multiomic_pipeline/support/meta_network_with_X_nobadchar.tsv")
library(igraph)
legraph <- graph_from_edgelist(as.matrix(meta_network_with_X[,c(1,3)]), directed = T)
for(i in 1:length(names(signaling_input_carnival)))
{
for(j in 1:length(names(metab_input_carnival)))
{
print(length(names(unlist(shortest_paths(legraph, names(signaling_input_carnival)[i], names(metab_input_carnival)[j])[[1]])))
)
}
}
length(names(unlist(shortest_paths(legraph, names(signaling_input_carnival)[1], names(metab_input_carnival)[1])[[1]])))
names(signaling_input_carnival) %in% meta_network_with_X$source & names(signaling_input_carnival) %in% meta_network_with_X$target
url <- paste0(
'http://omnipathdb.org/interactions?',
'datasets=tfregulons&tfregulons_levels=A,B&genesymbols=1&fields=sources,tfregulons_level'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
##Dorothea/viper
dorothea <- download_omnipath()
dorothea <- dorothea[,c(4,3,6,7)]
dorothea$sign <- dorothea$is_stimulation - dorothea$is_inhibition
dorothea$sign <- ifelse(dorothea$sign == 0, 1, dorothea$sign)
dorothea <- dorothea[,c(1,2,5)]
library(omicToolsTest)
View(dorothea)
?df_to_viper_regulon
viper_regulon <- df_to_viper_regulon(dorothea)
url <- paste0(
'http://omnipathdb.org/interactions?',
'datasets=tfregulons&tfregulons_levels=A,B,C&genesymbols=1&fields=sources,tfregulons_level'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
##Dorothea/viper
dorothea <- download_omnipath()
dorothea <- dorothea[,c(4,3,6,7)]
dorothea$sign <- dorothea$is_stimulation - dorothea$is_inhibition
dorothea$sign <- ifelse(dorothea$sign == 0, 1, dorothea$sign)
dorothea <- dorothea[,c(1,2,5)]
viper_regulon <- df_to_viper_regulon(dorothea)
save(viper_regulon,"~/Desktop/viper_regulon_ABC.RData")
save(viper_regulon,file = "~/Desktop/viper_regulon_ABC.RData")
View(df_to_viper_regulon())
View(df_to_viper_regulon)
library(readr)
library(stringr)
library('org.Hs.eg.db')
#### Preparation des input metabolomic
ttop_tumour_vs_healthy <- as.data.frame(
read_csv("Dropbox/kidney_cancer_multiomic_pipeline/results/metabolomic/final_samples/ttop_tumour_vs_healthy.csv"))
metab_to_kegg <- as.data.frame(
read_csv("Dropbox/kidney_cancer_multiomic_pipeline/support/metab_to_kegg.txt"))
meta_network_with_X <- as.data.frame(
read_delim("Dropbox/kidney_cancer_multiomic_pipeline/support/meta_network_with_X.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
kegg_to_pubchem <- as.data.frame(
read_csv("Dropbox/kidney_cancer_multiomic_pipeline/support/kegg_to_pubchem.txt",
col_names = FALSE))
kegg_to_pubchem$X2 <- paste("XMetab__",kegg_to_pubchem$X2, sep = "")
compartment_codes <- unique(c(meta_network_with_X$source,meta_network_with_X$target))
compartment_codes <- compartment_codes[grepl("Metab",compartment_codes)]
compartment_codes <- unique(str_match(compartment_codes,"___.____"))
compartment_mapping <- list()
for(i in 1:length(compartment_codes))
{
df <- kegg_to_pubchem
df$X2 <- paste(df$X2, compartment_codes[i], sep = "")
compartment_mapping[[i]] <- df
}
compartment_mapping <- as.data.frame(do.call(rbind, compartment_mapping))
compartment_mapping <- compartment_mapping[
compartment_mapping$X2 %in% meta_network_with_X$source |
compartment_mapping$X2 %in% meta_network_with_X$target,
]
kegg_to_pubchem_with_comp <- compartment_mapping
names(kegg_to_pubchem_with_comp) <- c("KEGG","pubchem")
full_mapping <- merge(metab_to_kegg, kegg_to_pubchem_with_comp, by = "KEGG")
names(ttop_tumour_vs_healthy)[1] <- "metab_name"
ttop_tumour_vs_healthy <- merge(ttop_tumour_vs_healthy, full_mapping, by = "metab_name")
ttop_tumour_vs_healthy <- ttop_tumour_vs_healthy[,c(9,2:7)]
#### Preparation des input kinase/TF
##KINASE
kinase_activities <- as.data.frame(
read_csv("Dropbox/kidney_cancer_multiomic_pipeline/results/phospho/final_samples/kinase_activities.csv"))
symbols <- kinase_activities$X1
# use mapIds method to obtain Entrez IDs
mapping_symbole_to_entrez <- mapIds(org.Hs.eg.db, symbols, 'ENTREZID', 'SYMBOL')
for(i in 1:length(kinase_activities[,1]))
{
kinase_activities[i,1] <- mapping_symbole_to_entrez[kinase_activities[i,1]]
}
kinase_activities <- kinase_activities[complete.cases(kinase_activities),]
kinase_activities$X1 <- paste("X", kinase_activities$X1, sep = "")
##TF
TF_scores <- as.data.frame(
read_csv("Dropbox/kidney_cancer_multiomic_pipeline/results/transcriptomic/final_subset/TF_scores.csv"))
symbols <- TF_scores$ID
# use mapIds method to obtain Entrez IDs
mapping_symbole_to_entrez <- mapIds(org.Hs.eg.db, symbols, 'ENTREZID', 'SYMBOL')
for(i in 1:length(TF_scores[,1]))
{
TF_scores[i,1] <- mapping_symbole_to_entrez[TF_scores[i,1]]
}
TF_scores <- TF_scores[complete.cases(TF_scores),]
TF_scores$ID <- paste("X", TF_scores$ID, sep = "")
##Combine TF and kinase
names(TF_scores) <- c("X1","NES")
kinase_activities <- as.data.frame(rbind(kinase_activities, TF_scores))
#### Input formatting
metab_input_carnival <- ttop_tumour_vs_healthy[ttop_tumour_vs_healthy$P.Value < 0.05,c(1,4)]
metab_input_carnival <- metab_input_carnival[metab_input_carnival$pubchem %in% meta_network_with_X$source | metab_input_carnival$pubchem %in% meta_network_with_X$target,]
metabs <- metab_input_carnival$pubchem
metab_input_carnival <- as.data.frame(sign(t(metab_input_carnival[,2])))
names(metab_input_carnival) <- metabs
signaling_input_carnival <- kinase_activities[abs(kinase_activities$NES) > 1.7,]
signaling_input_carnival <- signaling_input_carnival[signaling_input_carnival$X1 %in% meta_network_with_X$source | signaling_input_carnival$X1 %in% meta_network_with_X$target,]
signaling_enzymes <- signaling_input_carnival$X1
signaling_input_carnival <- as.data.frame(sign(t(signaling_input_carnival[,2])))
names(signaling_input_carnival) <- signaling_enzymes
write_csv(metab_input_carnival, "~/Dropbox/kidney_cancer_multiomic_pipeline/results/metabolomic/final_samples/metab_input_carnival.csv")
write_tsv(metab_input_carnival, "~/Dropbox/kidney_cancer_multiomic_pipeline/results/metabolomic/final_samples/metab_input_carnival.tsv")
write_csv(signaling_input_carnival, "~/Dropbox/kidney_cancer_multiomic_pipeline/results/phospho/final_samples/signaling_input_carnival.csv")
write_tsv(signaling_input_carnival, "~/Dropbox/kidney_cancer_multiomic_pipeline/results/phospho/final_samples/signaling_input_carnival.tsv")
meta_network_with_X$source <- gsub("[-+{},;() ]","______",meta_network_with_X$source)
meta_network_with_X$target <- gsub("[-+{},;() ]","______",meta_network_with_X$target)
View(meta_network_with_X)
grepl("XMetab__962",meta_network_with_X[11848,])
grepl("XMetab__962",meta_network_with_X[c(11848,12720,13002),])
meta_network_with_X <- meta_network_with_X[!grepl("XMetab__962",meta_network_with_X$source) &
!grepl("XMetab__962",meta_network_with_X$target),]
write_tsv(meta_network_with_X, "~/Dropbox/kidney_cancer_multiomic_pipeline/support/meta_network_with_X_nobadchar.tsv")
library(readr)
library(omicToolsTest)
library(limma)
library(vsn)
library(readxl)
#Import data
raw_metabolomic <- as.data.frame(read_excel("Dropbox/kidney_cancer_multiomic_pipeline/data/metabolomic/raw_metabolomic.xlsx",
na = "NF"))
metab_id_correspondance <- as.data.frame(read_delim("Dropbox/kidney_cancer_multiomic_pipeline/support/metab_id_correspondance",
"\t", escape_double = FALSE, trim_ws = TRUE))
names(raw_metabolomic) <- c("ID", metab_id_correspondance$ID)
names(raw_metabolomic) <- gsub(" T","TU", names(raw_metabolomic))
names(raw_metabolomic) <- gsub(" H","KI", names(raw_metabolomic))
row.names(raw_metabolomic) <- raw_metabolomic[,1]
raw_metabolomic <- raw_metabolomic[,-1]
samples_to_keep <- c(paste(c("11", "15", "16", "24", "29", "32", "38", "40", "35"), "TU", sep = ""), paste(c("11", "15", "16", "24", "29", "32", "38", "40", "35"), "KI", sep = ""))
samples_to_keep <- samples_to_keep[samples_to_keep %in% names(raw_metabolomic)]
raw_metabolomic <- raw_metabolomic[,samples_to_keep]
min(raw_metabolomic, na.rm = T)
max(raw_metabolomic, na.rm = T)
targets_1 <- as.data.frame(matrix(NA,length(raw_metabolomic[1,]),2))
names(targets_1) <- c("sample","condition")
targets_1$sample <- names(raw_metabolomic)
targets_1$condition <- gsub("[0-9]*","",targets_1$sample)
View(targets_1)
library(readr)
ttop_tumour_vs_healthy <- read_csv("Dropbox/kidney_cancer_multiomic_pipeline/results/metabolomic/ttop_tumour_vs_healthy.csv")
View(ttop_tumour_vs_healthy)
library(readr)
meta_network <- read_csv("Dropbox/Meta_PKN/result/meta_network.csv")
View(meta_network)
library(readr)
reaction_network_recon3_no_cofact <- read_csv("Dropbox/Meta_PKN/recon3D_netowrk/reaction_network_recon3_no_cofact.csv")
View(reaction_network_recon3_no_cofact)
View(reaction_network_recon3_no_cofact)
library(readr)
reaction_network_recon3 <- read_csv("Dropbox/Meta_PKN/recon3D_netowrk/reaction_network_recon3.csv")
View(reaction_network_recon3)
View(meta_network)
library(readr)
STITCH_900_sif <- read_csv("Dropbox/Meta_PKN/STITCH_network/STITCH_900_sif.csv")
View(STITCH_900_sif)
#Copyright (C) 2019  Aurelien Dugourd
#Contact : aurelien.dugourd@bioquant.uni-heidelberg.de
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#############################
#######   WHADIZDIS    ######
#############################
#This script is designed to guide the analysis one RNAseq data with the help of footprint based analysis tools
#such as DOROTHEA/Viper, Progeny and CARNIVAL
#Here we use an example dataset to guide the analysis
#Main libraries
library(readr)
library(vsn)
library(limma)
library(viper)
#Support functions also requires
library(ggplot2)
library(reshape)
library(pheatmap)
library(gridExtra)
library(grid)
library(cowplot)
library(ggrepel)
working_dir <- "~/Documents/transcriptutorial/" #put whatever is your working directory here
setwd(working_dir)
source("scripts/support_functions.R")
### Preparing dorothea
url <- paste0(
'http://omnipathdb.org/interactions?',
'datasets=tfregulons&tfregulons_levels=A,B&genesymbols=1&fields=sources,tfregulons_level'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
##Dorothea/viper
dorothea <- download_omnipath()
dorothea <- dorothea[,c(4,3,6,7)]
dorothea$sign <- dorothea$is_stimulation - dorothea$is_inhibition
dorothea$sign <- ifelse(dorothea$sign == 0, 1, dorothea$sign)
dorothea <- dorothea[,c(1,2,5)]
### Import the raw count dataframe
#downloaded from https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE119931
#download the file : GSE119931_PANC1.FOXA2KO.genes.counts.txt.gz and decompress it in the data folder
GSE119931_PANC1_FOXA2KO_genes_counts <- as.data.frame(
read_delim("data/GSE119931_PANC1.FOXA2KO.genes.counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
count_df <- GSE119931_PANC1_FOXA2KO_genes_counts[,c(7:12)]
row.names(count_df) <- GSE119931_PANC1_FOXA2KO_genes_counts$Geneid
